{"version":3,"sources":["BookService.js"],"names":["BookService","database","Book","findAll","newBook","create","id","updateBook","findOne","where","Number","bookToUpdate","update","theBook","bookToDelete","destroy","deletedBook"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;uBAGmBC,mBAASC,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;;;;;;;;;qHAMAC,O;;;;;;;uBAEAH,mBAASC,IAAT,CAAcG,MAAd,CAAqBD,OAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;yHAMGE,E,EAAIC,W;;;;;;;;uBAEON,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC7CC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADsC,iBAAtB,C;;;AAArBK,gBAAAA,Y;;qBAIFA,Y;;;;;;uBACMV,mBAASC,IAAT,CAAcU,MAAd,CAAqBL,WAArB,EAAiC;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAjC,C;;;kDAECC,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;sHAMOD,E;;;;;;;;uBAEQL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AACxCC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADiC,iBAAtB,C;;;AAAhBO,gBAAAA,O;kDAICA,O;;;;;;;;;;;;;;;;;;;;;;;;wHAMSP,E;;;;;;;;uBAEWL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAAEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAAtB,C;;;AAArBQ,gBAAAA,Y;;qBAEFA,Y;;;;;;uBAC0Bb,mBAASC,IAAT,CAAca,OAAd,CAAsB;AAC5CN,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADqC,iBAAtB,C;;;AAApBU,gBAAAA,W;kDAGCA,W;;;kDAEJ,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOJhB,W","sourceRoot":"/Users/noahkalyesubula/andapp/api/server/services","sourcesContent":["import database from '../src/models';\n\nclass BookService {\n    static async getAllBooks() {\n        try {\n            return await database.Book.findAll();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async addBook(newBook) {\n        try {\n            return await database.Book.create(newBook);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async updateBook(id, updateBook) {\n        try {\n            const bookToUpdate = await database.Book.findOne({\n                where: { id: Number(id) }\n            });\n\n            if (bookToUpdate) {\n                await database.Book.update(updateBook, { where: { id: Number(id) } });\n\n                return updateBook;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async getABook(id) {\n        try {\n            const theBook = await database.Book.findOne({\n                where: { id: Number(id) }\n            });\n\n            return theBook;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async deleteBook(id) {\n        try {\n            const bookToDelete = await database.Book.findOne({ where: { id: Number(id) } });\n\n            if (bookToDelete) {\n                const deletedBook = await database.Book.destroy({\n                    where: { id: Number(id) }\n                });\n                return deletedBook;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport default BookService;"]}